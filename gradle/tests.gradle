if (hasTestsOfCategory(project, "cassandra")){
    task testCassandra(type: Test) {
        enabled = shouldTest(project, "cassandra")
        useJUnitPlatform {
            includeTags "cassandra"
        }
    }
}

if (hasTestsOfCategory(project, "cosmosdb")) {
    task testCosmosDb(type: Test) {
        enabled = shouldTest(project, "cosmosdb")
        useJUnitPlatform {
            includeTags "cosmosdb"
        }
    }
}

if (hasTestsOfCategory(project, "awss3")) {
    task testAWSS3(type: Test) {
        enabled = shouldTest(project, "awss3")
        useJUnitPlatform {
            includeTags "awss3"
        }
    }
}

if (hasTestsOfCategory(project, "radius")) {
    task testRadius(type: Test) {
        enabled = shouldTest(project, "radius")
        useJUnitPlatform {
            includeTags "radius"
        }
    }
}

if (hasTestsOfCategory(project, "couchbase")) {
    task testCouchbase(type: Test) {
        enabled = shouldTest(project, "couchbase")
        useJUnitPlatform {
            includeTags "couchbase"
        }
    }
}

if (hasTestsOfCategory(project, "couchdb")) {
    task testCouchDb(type: Test) {
        enabled = shouldTest(project, "couchdb")
        useJUnitPlatform {
            includeTags "couchdb"
        }
    }
}

if (hasTestsOfCategory(project, "mysql")) {
    task testMySQL(type: Test) {
        enabled = shouldTest(project, "mysql")
        useJUnitPlatform {
            includeTags "mysql"
        }
    }
}

if (hasTestsOfCategory(project, "postgres")) {
    task testPostgres(type: Test) {
        enabled = shouldTest(project, "postgres")
        useJUnitPlatform {
            includeTags "postgres"
        }
    }
}

if (hasTestsOfCategory(project, "mssqlserver")) {
    task testMsSqlServer(type: Test) {
        enabled = shouldTest(project, "mssqlserver")
        useJUnitPlatform {
            includeTags "mssqlserver"
        }
    }
}

if (hasTestsOfCategory(project, "mariadb")) {
    task testMariaDb(type: Test) {
        enabled = shouldTest(project, "mariadb")
        useJUnitPlatform {
            includeTags "mariadb"
        }
    }
}

if (hasTestsOfCategory(project, "dynamodb")) {
    task testDynamoDb(type: Test) {
        enabled = shouldTest(project, "dynamodb")
        useJUnitPlatform {
            includeTags "dynamodb"
        }
    }
}

if (hasTestsOfCategory(project, "filesystem")) {
    task testFileSystem(type: Test) {
        enabled = shouldTest(project, "filesystem")
        useJUnitPlatform {
            includeTags "filesystem"
        }
    }
}

if (hasTestsOfCategory(project, "ignite")) {
    task testIgnite(type: Test) {
        enabled = shouldTest(project, "ignite")
        useJUnitPlatform {
            includeTags "ignite"
        }
        def list = []
        list.add("--add-exports")
        list.add("java.base/jdk.internal.misc=ALL-UNNAMED")
        list.add("--add-exports")
        list.add("java.base/sun.nio.ch=ALL-UNNAMED")
        jvmArgs = list
    }
}

if (hasTestsOfCategory(project, "influxdb")) {
    task testInfluxDb(type: Test) {
        enabled = shouldTest(project, "influxdb")
        useJUnitPlatform {
            includeTags "influxdb"
        }
    }
}

if (hasTestsOfCategory(project, "ldap")) {
    task testLdap(type: Test) {
        enabled = shouldTest(project, "ldap")
        useJUnitPlatform {
            includeTags "ldap"
        }
    }
}

if (hasTestsOfCategory(project, "mail")) {
    task testMail(type: Test) {
        enabled = shouldTest(project, "mail")
        useJUnitPlatform {
            includeTags "mail"
        }
    }
}

if (hasTestsOfCategory(project, "restful")) {
    task testRestful(type: Test) {
        enabled = shouldTest(project, "restful")
        useJUnitPlatform {
            includeTags "restful"
        }
    }
}

if (hasTestsOfCategory(project, "memcached")) {
    task testMemcached(type: Test) {
        enabled = shouldTest(project, "memcached")
        useJUnitPlatform {
            includeTags "memcached"
        }
    }
}

if (hasTestsOfCategory(project, "mongodb")) {
    task testMongoDb(type: Test) {
        enabled = shouldTest(project, "mongodb")
        useJUnitPlatform {
            includeTags "mongodb"
        }
    }
}

if (hasTestsOfCategory(project, "redis")) {
    task testRedis(type: Test) {
        enabled = shouldTest(project, "redis")
        useJUnitPlatform {
            includeTags "redis"
        }
    }
}

test {
    useJUnitPlatform {
        includeEngines 'junit-vintage'
        excludeTags "cassandra",
                "cosmosdb",
                "couchbase",
                "dynamodb",
                "filesystem",
                "ignite",
                "influxdb",
                "couchdb",
                "ldap",
                "mail",
                "mariadb",
                "memcached",
                "mongodb",
                "mssqlserver",
                "mysql",
                "postgres",
                "redis",
                "radius",
                "awss3",
                "restful"
    }
    enabled = "SIMPLE".equalsIgnoreCase(rootProject.testCategoryType) && !Boolean.getBoolean("skipTests")
}

tasks.withType(Test) {
    scanForTestClasses = false
    ignoreFailures = Boolean.getBoolean("ignoreTestFailures")
    include "**/*Tests.*"

    doFirst {
        maxParallelForks = project.ext.properties.get("maxParallelForksForTests", 2)
        if(maxParallelForks != 2) {
            println "Maximum number of parallel forks is set to ${maxParallelForks}"
        }
    }

    failFast = true
    jvmArgs.addAll(["-Xms512m", "-Xmx4g"])
    classpath = it.classpath + files("${projectDir}/src/main/resources") + files("${projectDir}/src/test/resources")
    testLogging {
        events = ["FAILED", "STANDARD_OUT"]
        exceptionFormat = "full"
        showStandardStreams = Boolean.getBoolean("showStandardStreams")
        showExceptions = true
        showCauses = true
    }
}

def shouldTest(Project project, String category) {
    !Boolean.getBoolean("skipTests") && category.equalsIgnoreCase(rootProject.testCategoryType) && hasTestsOfCategory(project, category)
}

def hasTestsOfCategory(Project project, String category) {
    
    def testSrc = project.sourceSets.test.java.srcDirs
    def res = srcTagMap.computeIfAbsent(testSrc) {
        def tags = new HashSet()
        testSrc.each { src ->
            try {
                src.eachFileRecurse { file ->
                    if (file ==~ /.*Tests\.\w+/) {
                        file.readLines().parallelStream().forEach() { line ->
                            def m = line =~ /^\s*@Tag\("(\w+)"\)\s*$/
                            if (m) {
                                tags.addAll(m.collect { it[1] })
                            }
                        }
                    }
                }
            } catch (ignored) {
            }
        }
        tags
    }
    res.contains(category)
}
